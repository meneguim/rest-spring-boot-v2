package br.com.erudio.math;

import br.com.erudio.exception.UnsupportedMathOperationException;

public class Calc {
	
	
	public static Double calc(String operationType, Double n1, Double n2) {
		validaParam (operationType, n1, n2);
		Double value = 0D;
		if (operationType.toUpperCase().equals("SUM")) {
			value = sumCalc(n1, n2);
		} else if (operationType.toUpperCase().equals("SUBTRACTION")) {
			value = subCalc(n1, n2);
		} else if (operationType.toUpperCase().equals("DIVISION")) {
			value = divCalc(n1, n2);
		} else if (operationType.toUpperCase().equals("MULTIPLICATION")) {
			value = mulCalc(n1, n2);
		} else if (operationType.toUpperCase().equals("SQUARE")) {
			value = squCalc(n1);
		} else if (operationType.toUpperCase().equals("AVERAGE")) {
			value = aveCalc(n1, n2);
		}
		
		return value;
	}
	
	private static void validaParam (String operationType, Double n1, Double n2) {
		if (n1 == null || 
			n2 == null) {
			throw new UnsupportedMathOperationException("O primeiro e segundo número devem ser especificados");
		}
		
		if (operationType == null) {
			throw new UnsupportedMathOperationException("O tipo da operação deve ser especificado como"
					+ " sum,"
					+ " subtraction,"
					+ " division,"
					+ " multiplication,"
					+ " square,"
					+ " or average");
		}
		
		boolean valid = false;
		if (operationType.toUpperCase().equals("SUM")) valid = true;
		if (operationType.toUpperCase().equals("SUBTRACTION")) valid = true;
		if (operationType.toUpperCase().equals("DIVISION")) valid = true;
		if (operationType.toUpperCase().equals("MULTIPLICATION")) valid = true;
		if (operationType.toUpperCase().equals("SQUARE")) valid = true;
		if (operationType.toUpperCase().equals("AVERAGE")) valid = true;
		
		if (!valid) {
			throw new UnsupportedMathOperationException("O tipo da operação deve ser especificado como"
					+ " sum,"
					+ " subtraction,"
					+ " division,"
					+ " multiplication,"
					+ " square,"
					+ " or average");
		}		
	}
	
	private static Double sumCalc(Double n1, Double n2) {
		return (n1 + n2);
	}
	
	private static Double subCalc(Double n1, Double n2) {
		return (n1 - n2);
	}
	
	private static Double divCalc(Double n1, Double n2) {
		if (n2 == 0) {
			throw new UnsupportedMathOperationException("Na divisão o segundo numero não pode ser zero");
		}
		return (n1 / n2);
	}
	
	private static Double mulCalc(Double n1, Double n2) {
		return (n1 * n2);
	}
	
	private static Double squCalc(Double n1) {
		return Math.sqrt(n1);
	}
	
	private static Double aveCalc(Double n1, Double n2) {
		return (n1 + n2) / 2;
	}
	
}